import java.awt.print.Book;
import java.awt.print.PageFormat;
import java.awt.print.Paper;
import java.awt.print.PrinterJob;
import java.io.InputStream;
import java.net.InetAddress;
import java.net.URL;
import java.net.URLEncoder;
import java.util.Properties;

import javax.print.PrintService;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

import com.runqian.base4.util.Native2Ascii;
import com.runqian.report4.control.PrintFrame;
import com.runqian.report4.control.PrintPage;
import com.runqian.report4.usermodel.IReport;
import com.runqian.report4.usermodel.PageBuilder;
import com.runqian.report4.usermodel.PrintSetup;
import com.runqian.report4.util.ReportParser;
import com.runqian.report4.util.ReportUtils;

public class VtradexAReport
{
  private byte _$6565 = 1;
  public String appRoot;
  public boolean bSetPageSize = false;
  public String cachedId;
  private boolean _$53026 = true;

  private int _$18084 = 1;
  public String dataServlet;
  public String fileName;
  private JPanel _$113994;
  public PrinterJob job;
  public PageFormat outerPf;
  private int _$53022;
  public String paramEncode = "GBK";
  public String paramString;
  private PageBuilder _$50295;
  private PageFormat _$38234;
  private Book _$53020;
  private IReport _$18980;
  public String reportParamsId;
  public boolean savePrintSetup = false;

  private byte _$53025 = -1;
  private String _$53039;
  private byte _$53028 = 1;

  private double _$53030 = 1.0D;
  public String srcType;
  private PageFormat _$53029;
  private byte _$36318 = 0;

  public void create()
  {
    String dataServer = this.appRoot + this.dataServlet + "&fileName=" + Native2Ascii.encode(this.fileName) + "&srcType=" + this.srcType;

    if (this.reportParamsId != null) {
      dataServer = dataServer + "&reportParamsId=" + this.reportParamsId;
    }
    if (this.cachedId != null) {
      dataServer = dataServer + "&cachedId=" + this.cachedId;
    }
    if (this.paramString != null)
      try {
        dataServer = dataServer + "&paramString=" + URLEncoder.encode(this.paramString, this.paramEncode);
      } catch (Exception e) {
        dataServer = dataServer + "&paramString=" + URLEncoder.encode(this.paramString);
      }
    try
    {
      URL url = new URL(dataServer);
      InputStream is = url.openStream();
      this._$18980 = ReportUtils.read(is);
      is.close();
      PrintSetup ps = this._$18980.getPrintSetup();
      byte pagerStyle = ps.getPagerStyle();
      if (pagerStyle == 1) {
        int layoutCol = ps.getLayoutColNum();
        if (layoutCol > 1) this._$53026 = false;
      }
      if (this.bSetPageSize) {
        this.outerPf = this.job.pageDialog(ps.getPageFormat());
      }
      if (this.outerPf == null) {
        PageFormat savedPf = null;
        if (this.savePrintSetup) {
          try {
            InetAddress ia = InetAddress.getLocalHost();
            String savePrintSetupKey = ia.getHostName() + ia.getHostAddress() + this.fileName + System.getProperty("user.name");
            String savePrintSetupUrl = this.appRoot + "/servlet/PrintSetupServlet";
            String surl = savePrintSetupUrl + "?action=read&key=" + URLEncoder.encode(savePrintSetupKey);
            URL aurl = new URL(surl);
            Properties p = new Properties();
            p.load(aurl.openStream());
            String hasSetup = p.getProperty("setup");
            if ((hasSetup == null) || (hasSetup.equalsIgnoreCase("no"))) {
              String otherKey = ia.getHostName() + ia.getHostAddress() + this.fileName;
              surl = savePrintSetupUrl + "?action=read&key=" + URLEncoder.encode(otherKey);
              aurl = new URL(surl);
              p = new Properties();
              p.load(aurl.openStream());
              hasSetup = p.getProperty("setup");
            }
            if ((hasSetup != null) && (hasSetup.equalsIgnoreCase("yes"))) {
              savedPf = new PageFormat();
              savedPf.setOrientation(Integer.parseInt(p.getProperty("orientation")));
              Paper paper = new Paper();
              double width = Double.parseDouble(p.getProperty("width"));
              double height = Double.parseDouble(p.getProperty("height"));
              paper.setSize(width, height);
              double x = Double.parseDouble(p.getProperty("x"));
              double y = Double.parseDouble(p.getProperty("y"));
              double w = Double.parseDouble(p.getProperty("w"));
              double h = Double.parseDouble(p.getProperty("h"));
              paper.setImageableArea(x, y, w, h);
              savedPf.setPaper(paper);
              this._$53039 = p.getProperty("printerName");
              if (this._$53039 != null) this._$53039 = new String(this._$53039.getBytes("iso8859-1"), "GBK");

              String sa = p.getProperty("a");
              if (sa != null) try {
                  this._$53025 = Byte.parseByte(sa);
                }
                catch (Exception localException1)
                {
                } 
            }
          }
          catch (Throwable e) {
            savedPf = null;
            e.printStackTrace();
          }
        }
        if (savedPf != null) this._$38234 = savedPf; else
          this._$38234 = ps.getPageFormat();
      } else {
        this._$38234 = this.outerPf;
      }this._$53028 = ps.getZoomMode();
      this._$6565 = ps.getHAlign();
      this._$36318 = ps.getVAlign();
      if (this._$53025 != -1) this._$6565 = this._$53025;
      this._$18084 = ps.getTableColumnNum();
      _$53044();
      _$53045();
    }
    catch (Throwable e) {
      e.printStackTrace();
    }
  }

  private void _$53044()
    throws Throwable
  {
    if (this._$53028 == 1) {
      this._$53029 = this._$38234;
      this._$53030 = 1.0D;
    }
    else {
      ReportParser csp = new ReportParser(this._$18980);
      if (this._$53028 == 2) {
        int w = csp.getReportWidth() + 2;
        this._$53030 = (this._$38234.getImageableWidth() / w);
      }
      else if (this._$53028 == 3) {
        int h = csp.getReportHeight() + 2;
        this._$53030 = (this._$38234.getImageableHeight() / h);
      }
      this._$53029 = _$53087(1.0D / this._$53030);
    }
    this._$50295 = new PageBuilder(this._$18980, this._$53029, this._$18084);
  }

  private PageFormat _$53087(double scale) {
    PageFormat pageformat = new PageFormat();
    Paper paper = new Paper();
    Paper p = this._$38234.getPaper();
    paper.setSize(p.getWidth() * scale, p.getHeight() * scale);
    double x = p.getImageableX() * scale;
    double y = p.getImageableY() * scale;
    double w = p.getImageableWidth() * scale;
    double h = p.getImageableHeight() * scale;
    paper.setImageableArea(x, y, w, h);
    pageformat.setPaper(paper);
    pageformat.setOrientation(this._$38234.getOrientation());
    return pageformat;
  }

  private void _$53045()
  {
    this._$53020 = new Book();
    this._$53022 = 0;
    int pageNo = 1;
    while (true) {
      PrintPage page = new PrintPage(this._$18980, this._$50295, this._$53029, null, pageNo, null);
      try {
        page.create();
        if (this._$53026) {
          page.setAlign(this._$6565);
          page.setVAlign(this._$36318);
        }
      }
      catch (Exception e) {
        System.out.println(e);
        break;
      }
      this._$113994.add(page);
      this._$53020.append(page, this._$38234);
      pageNo++;
      this._$53022 += 1;
    }
  }

  public PageFormat print() {
    JFrame jf = new JFrame();
    jf.setSize(60, 40);
    jf.setLocation(-150, -50);
    this._$113994 = new JPanel();
    jf.getContentPane().add(this._$113994);
    create();
    jf.show();

    PrintService[] pss = PrinterJob.lookupPrintServices();
    if (pss.length == 0) {
      JOptionPane.showMessageDialog(null, "no printers");
      return null;
    }
    if ((this.savePrintSetup) && (this._$53039 != null)) {
      for (int i = 0; i < pss.length; i++) {
        if (pss[i].getName().equals(this._$53039)) try {
            this.job.setPrintService(pss[i]); } catch (Exception e) {
            e.printStackTrace();
          }
      }

    }

    PrintFrame.setPrintScale(this._$53020, this._$53030);
    this.job.setPageable(this._$53020);
    try {
      this.job.print();
    }
    catch (Exception exc) {
      exc.printStackTrace();
    }
    jf.hide();
    jf.dispose();
    return this.outerPf;
  }
}