import com.runqian.base4.resources.MessageManager;
import com.runqian.report4.view.applet.DirectPrintApplet;
import java.awt.print.PageFormat;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.net.URL;
import java.util.StringTokenizer;
import javax.print.PrintService;
import javax.swing.JOptionPane;

public class VtradexDirectPrintApplet extends DirectPrintApplet
{
  private static final long serialVersionUID = 1L;
  private String appRoot;
  private String dataServlet;
  private String reportName;
  private String type;
  private String reportParams;
  private String cacheId;
  private String needPrintPrompt;
  private String needSelectPrinter;
  private String needSetPageSize;
  private String paramCharset;
  private String savePrintSetup;
  private String printServiceName;

  private String getParam(String key, String def)
  {
    return getParameter(key) != null ? getParameter(key) : def;
  }

  public void init() {
    this.appRoot = getParam("appRoot", "");
    if (!this.appRoot.toLowerCase().startsWith("http")) {
      URL urlBase = getCodeBase();
      this.appRoot = 
        (urlBase.getProtocol() + "://" + urlBase.getHost() + 
        ":" + urlBase.getPort() + this.appRoot);
    }
    this.dataServlet = getParam("dataServlet", "/reportServlet?action=1");
    this.reportName = getParam("fileName", "");
    this.type = getParam("srcType", "file");
    this.reportParams = getParam("reportParams", null);
    this.cacheId = getParam("cachedId", null);
    this.needPrintPrompt = getParam("needPrintPrompt", "no");
    this.needSelectPrinter = getParam("needSelectPrinter", "no");
    this.savePrintSetup = getParam("savePrintSetup", "no");
    this.needSetPageSize = getParam("needSetPageSize", "no");
    this.paramCharset = getParam("paramCharset", "GBK");
    this.printServiceName = getParam("printServiceName", null);
  }

  public void print()
  {
    String s = null;
    if ((this.needPrintPrompt.equalsIgnoreCase("yes")) && 
      (JOptionPane.showConfirmDialog(this, "", this.appRoot, 0, 3) != 0)) {
      return;
    }
    this.reportName = this.reportName.trim();
    PrinterJob job = PrinterJob.getPrinterJob();
    PrintService[] pss = PrinterJob.lookupPrintServices();
    
    if (pss.length == 0) {
      JOptionPane.showMessageDialog(this, 
        MessageManager.getManager("noPrinter"));
      return;
    }
    if (this.needSelectPrinter.equalsIgnoreCase("yes"))
      try {
        if (!job.printDialog()) return; 
      } catch (Exception localException) {
    }
    else{
    	if(printServiceName != null && !"".equals(printServiceName)){
    		for(PrintService ps : pss){
    	       if(ps.getName().equals(printServiceName) || ps.getName().contains(printServiceName)){
    	    	   try {
					job.setPrintService(ps);
					 break;
    	    	   } catch (PrinterException e) {
    	    	   }
    	       }
    	    }
    	}
    	
    }
    boolean bsavePrintSetup = "yes".equalsIgnoreCase(this.savePrintSetup);
    PageFormat outerPf = null;
    int count = 1;
    if (this.reportName.startsWith("{")) {
      int index = 0;
      int len = this.reportName.length();
      while (index < len) {
        index = this.reportName.indexOf("{", index);
        if (index < 0)
          break;
        int end = this.reportName.indexOf("}", index);
        s = this.reportName.substring(index + 1, end).trim();
        index = end + 1;
        String name = s;
        String paramString = null;
        int pos = s.indexOf("(");
        if (pos > 0) {
          paramString = s.substring(pos + 1, s.length() - 1).trim();
          name = s.substring(0, pos).trim();
        }
        if ((!name.toLowerCase().endsWith(".raq")) && 
          (!name.toLowerCase().endsWith(".rat")))
          name = name + ".raq";
        VtradexAReport report = new VtradexAReport();
        report.appRoot = this.appRoot;
        report.cachedId = this.cacheId;
        report.dataServlet = this.dataServlet;
        report.fileName = name;
        if (paramString != null) {
          report.paramString = paramString;
          report.paramEncode = this.paramCharset;
        }
        report.srcType = this.type;
        report.job = job;
        report.savePrintSetup = bsavePrintSetup;
        report.outerPf = outerPf;
        if ((count == 1) && 
          (this.needSetPageSize.equalsIgnoreCase("yes"))) {
          report.bSetPageSize = true;
          outerPf = report.print();
        } else {
          report.print();
        }
        count++;
      }
    } else {
      StringTokenizer st = new StringTokenizer(this.reportName, ",");
      while (st.hasMoreTokens()) {
        String name = st.nextToken().trim();
        if ((!name.toLowerCase().endsWith(".raq")) && 
          (!name.toLowerCase().endsWith(".rat")))
          name = name + ".raq";
        VtradexAReport report = new VtradexAReport();
        report.appRoot = this.appRoot;
        report.cachedId = this.cacheId;
        report.dataServlet = this.dataServlet;
        report.fileName = name;
        report.paramString = this.reportParams;
        report.paramEncode = this.paramCharset;
        report.srcType = this.type;
        report.job = job;
        report.savePrintSetup = bsavePrintSetup;
        report.outerPf = outerPf;
        if ((count == 1) && 
          (this.needSetPageSize.equalsIgnoreCase("yes"))) {
          report.bSetPageSize = true;
          outerPf = report.print();
        } else {
          report.print();
        }
        count++;
      }
    }
  }
}